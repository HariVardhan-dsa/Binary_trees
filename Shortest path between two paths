// This fun helps us to find the node and store it's path

bool isthere(TreeNode* root,string& ans,int val){
        if(root->val==val)return true;
        if(root->left&&isthere(root->left,ans,val)){
            ans.push_back('L');
        }
        else if(root->right&&isthere(root->right,ans,val)){
            ans.push_back('R');
        }
        return !ans.empty();
}

string getDirections(TreeNode* root, int startValue, int destValue) {
        string sv,dv;
        isthere(root,sv,startValue);
        isthere(root,dv,destValue);

        //This loop will find lowest common ancestor by removing common directions 
        while(!sv.empty()&&!dv.empty()&&sv.back()==dv.back()){
            sv.pop_back();
            dv.pop_back();
        }

        // from start value we have to go upwards and then right
        return string(sv.size(),'U')+string(rbegin(dv),rend(dv));
}

Example:
    Step 1: Find path to 4
         1
        / \
       2   3
      /|   |\
     4 5   6 7
        |
        8
Path to 4: LL

Step 2: Find path to 8
         1
        / \
       2   3
      /|   |\
     4 5   6 7
        |
        8
Path to 8: LRL

Step 3: Remove common prefix and convert to directions
Path to 4: L -> U
Path to 8: RL
Directions: URL

 
    
